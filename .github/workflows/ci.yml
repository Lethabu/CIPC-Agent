# GitHub Actions CI Workflow for the CIPC AI Agent

name: Build and Publish Docker Images

# This workflow runs on every push to the main branch
on:
  push:
    branches:
      - main

jobs:
  lint-test-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Node.js/TypeScript Linting and Testing
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Assuming Node.js 20 based on package.json dependencies

      - name: Install Node.js dependencies (root)
        run: npm install

      - name: Run Node.js Lint
        run: npm run lint

      - name: Run Node.js Tests
        run: npm test

      # Go Linting and Testing
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25' # Based on go.mod

      - name: Run Go Lint (go fmt and go vet)
        run: |
          go fmt ./...
          go vet ./...

      - name: Run Go Tests
        run: go test ./...

      # Docker Build and Push (existing steps, potentially modified for deployment)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub (or other registry)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Placeholder
          password: ${{ secrets.DOCKER_PASSWORD }} # Placeholder

      - name: Build and push Node.js server image
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile.node
          push: true
          tags: your-docker-repo/cipc-agent-node:latest # Placeholder

      - name: Build and push Go worker image
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: your-docker-repo/cipc-agent-go:latest # Placeholder

  deploy:
    runs-on: ubuntu-latest
    needs: lint-test-build # Ensure deployment only happens after linting, testing, and building
    environment: production # Use a production environment for secrets and approvals

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to Fly.io
        uses: superfly/flyctl-actions/setup@master
        with:
          version: latest
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}